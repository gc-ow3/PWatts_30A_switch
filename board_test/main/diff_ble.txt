1,13c1,5
< // Copyright 2015-2018 Espressif Systems (Shanghai) PTE LTD
< //
< // Licensed under the Apache License, Version 2.0 (the "License");
< // you may not use this file except in compliance with the License.
< // You may obtain a copy of the License at
< 
< //     http://www.apache.org/licenses/LICENSE-2.0
< //
< // Unless required by applicable law or agreed to in writing, software
< // distributed under the License is distributed on an "AS IS" BASIS,
< // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
< // See the License for the specific language governing permissions and
< // limitations under the License.
---
> /*
>  * SPDX-FileCopyrightText: 2015-2021 Espressif Systems (Shanghai) CO LTD
>  *
>  * SPDX-License-Identifier: Apache-2.0
>  */
18c10
< #include <esp_bt.h>
---
> #include "esp_bt.h"
25a18,19
> static uint16_t g_ble_max_gatt_table_size;
> 
28a23,40
> static uint16_t *g_gatt_table_map;
> 
> static uint8_t adv_config_done;
> #define adv_config_flag      (1 << 0)
> #define scan_rsp_config_flag (1 << 1)
> 
> const uint8_t *simple_ble_get_uuid128(uint16_t handle)
> {
>     const uint8_t *uuid128_ptr;
> 
>     for (int i = 0; i < g_ble_max_gatt_table_size; i++) {
>         if (g_gatt_table_map[i] == handle) {
>             uuid128_ptr = (const uint8_t *) g_ble_cfg_p->gatt_db[i].att_desc.uuid_p;
>             return uuid128_ptr;
>         }
>     }
>     return NULL;
> }
33,35c45,58
<     case ESP_GAP_BLE_ADV_DATA_SET_COMPLETE_EVT:
<         esp_ble_gap_start_advertising(&g_ble_cfg_p->adv_params);
< 
---
>     case ESP_GAP_BLE_ADV_DATA_RAW_SET_COMPLETE_EVT:
>         adv_config_done &= (~adv_config_flag);
>         if (adv_config_done == 0) {
>             esp_ble_gap_start_advertising(&g_ble_cfg_p->adv_params);
>         }
>         break;
>     case ESP_GAP_BLE_SCAN_RSP_DATA_RAW_SET_COMPLETE_EVT:
>         adv_config_done &= (~scan_rsp_config_flag);
>         if (adv_config_done == 0) {
>             esp_ble_gap_start_advertising(&g_ble_cfg_p->adv_params);
>         }
>         break;
>     case ESP_GAP_BLE_SEC_REQ_EVT:
>         esp_ble_gap_security_rsp(param->ble_security.ble_req.bd_addr, true);
45a69
>     uint8_t service_instance_id = 0;
62a87,91
>         ret = esp_ble_gatts_create_attr_tab(g_ble_cfg_p->gatt_db, gatts_if, g_ble_cfg_p->gatt_db_count, service_instance_id);
>         if (ret) {
>             ESP_LOGE(TAG, "create attr table failed, error code = 0x%x", ret);
>             return;
>         }
68c97,98
<         ret = esp_ble_gap_config_adv_data(&g_ble_cfg_p->adv_data);
---
>         ret = esp_ble_gap_config_adv_data_raw(g_ble_cfg_p->raw_adv_data_p,
>                                               g_ble_cfg_p->raw_adv_data_len);
70c100
<             ESP_LOGE(TAG, "config adv data failed, error code = 0x%x", ret);
---
>             ESP_LOGE(TAG, "config raw adv data failed, error code = 0x%x ", ret);
72a103,110
>         adv_config_done |= adv_config_flag;
>         ret = esp_ble_gap_config_scan_rsp_data_raw(g_ble_cfg_p->raw_scan_rsp_data_p,
>                                                    g_ble_cfg_p->raw_scan_rsp_data_len);
>         if (ret) {
>             ESP_LOGE(TAG, "config raw scan rsp data failed, error code = 0x%x", ret);
>             return;
>         }
>         adv_config_done |= scan_rsp_config_flag;
112c150,169
<     case ESP_GATTS_CREAT_ATTR_TAB_EVT:
---
>     case ESP_GATTS_CREAT_ATTR_TAB_EVT: {
>         if (param->add_attr_tab.status != ESP_GATT_OK) {
>             ESP_LOGE(TAG, "creating the attribute table failed, error code=0x%x", param->add_attr_tab.status);
>         } else if (param->add_attr_tab.num_handle != g_ble_cfg_p->gatt_db_count) {
>             ESP_LOGE(TAG, "created attribute table abnormally ");
>         } else {
>             ESP_LOGD(TAG, "created attribute table successfully, the number handle = %d", param->add_attr_tab.num_handle);
>             g_gatt_table_map = (uint16_t *) calloc(param->add_attr_tab.num_handle, sizeof(uint16_t));
>             if (g_gatt_table_map == NULL) {
>                 ESP_LOGE(TAG, "Memory allocation for GATT_TABLE_MAP failed ");
>                 break;
>             }
>             /* Update g_ble_max_gatt_table_size with number of handles */
>             g_ble_max_gatt_table_size = param->add_attr_tab.num_handle;
>             memcpy(g_gatt_table_map, param->add_attr_tab.handles, param->add_attr_tab.num_handle * sizeof(g_gatt_table_map[0]));
>             /* We assume, for now, that the first entry is always the index to the 'service' definition */
>             esp_ble_gatts_start_service(g_gatt_table_map[0]);
>         }
>         break;
>     }
126c183
< simple_ble_cfg_t *simple_ble_init()
---
> simple_ble_cfg_t *simple_ble_init(void)
136c193
< esp_err_t simple_ble_deinit()
---
> esp_err_t simple_ble_deinit(void)
137a195,196
>     free(g_ble_cfg_p->gatt_db);
>     g_ble_cfg_p->gatt_db = NULL;
139a199,203
> 
>     free(g_gatt_table_map);
>     g_gatt_table_map = NULL;
>     g_ble_max_gatt_table_size = 0;
> 
157c221
< #ifdef CONFIG_BTDM_CONTROLLER_MODE_BTDM
---
> #ifdef CONFIG_BTDM_CTRL_MODE_BTDM
159c223
< #elif defined CONFIG_BTDM_CONTROLLER_MODE_BLE_ONLY
---
> #elif defined CONFIG_BTDM_CTRL_MODE_BLE_ONLY || CONFIG_BT_CTRL_MODE_EFF
205a270,288
> 
>     /* set the security iocap & auth_req & key size & init key response key parameters to the stack*/
>     esp_ble_auth_req_t auth_req;
>     if (cfg->ble_bonding) {
> 	auth_req = ESP_LE_AUTH_REQ_SC_MITM_BOND;     //bonding with peer device after authentication
>     } else {
> 	auth_req = ESP_LE_AUTH_REQ_SC_MITM;
>     }
>     esp_ble_io_cap_t iocap = ESP_IO_CAP_NONE;           //set the IO capability to No output No input
>     uint8_t key_size = 16;      //the key size should be 7~16 bytes
>     uint8_t init_key = ESP_BLE_ENC_KEY_MASK | ESP_BLE_ID_KEY_MASK;
>     uint8_t rsp_key = ESP_BLE_ENC_KEY_MASK | ESP_BLE_ID_KEY_MASK;
> 
>     esp_ble_gap_set_security_param(ESP_BLE_SM_AUTHEN_REQ_MODE, &auth_req, sizeof(uint8_t));
>     esp_ble_gap_set_security_param(ESP_BLE_SM_IOCAP_MODE, &iocap, sizeof(uint8_t));
>     esp_ble_gap_set_security_param(ESP_BLE_SM_MAX_KEY_SIZE, &key_size, sizeof(uint8_t));
>     esp_ble_gap_set_security_param(ESP_BLE_SM_SET_INIT_KEY, &init_key, sizeof(uint8_t));
>     esp_ble_gap_set_security_param(ESP_BLE_SM_SET_RSP_KEY, &rsp_key, sizeof(uint8_t));
> 
209c292
< esp_err_t simple_ble_stop()
---
> esp_err_t simple_ble_stop(void)
